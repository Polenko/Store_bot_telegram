import base64
import logging
import os
import re
import subprocess
from datetime import datetime, timedelta

from PIL import Image
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputFile
from aiogram.utils.exceptions import ChatNotFound, MessageToEditNotFound
from bson import ObjectId

from config import admin_user_id, GROUP_CHAT_ID
from db import add_category, get_users_from_db, bot, get_categories_from_db, \
    add_product_to_category, get_product_data, update_catalog_name, \
    get_admins_from_db, dp, update_product_attribute, \
    remove_admin_from_db, get_admin_info, get_admins_ids_from_db, save_image, remove_category_from_db, \
    get_products_in_category, add_admin_to_db, get_user, \
    add_user, update_user_number, update_user_name, get_products_in_category_by_id, \
    get_photo_file_by_id, remove_product_from_db_by_id, save_order, get_order_history, \
    add_user_to_black_list, get_user_to_black_list, remove_user_from_black_list, get_blacklist_info, get_daily_stats, \
    get_stats_for_period, get_messanger_from_db, addmessanger, remove_contact_from_db, \
    add_pickup_address, get_pickup_address, update_pickup_address, get_product_quantity, get_product_by_id, \
    get_catalog_by_name
from states import ProductForm, NewCategory, UserForm, AddPerson, UpdateUserData, DeleteProduct, SetDeliveryState, \
    Broadcast, AddNewPerson, AddContactState, PickupAddressState, UpdateAddressState, \
    DeliveryState, EditProduct

user_carts = {}
catalog_name_data = {}


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_in_black_list = await get_blacklist_info(user_id)

    if not user_in_black_list:
        await bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=await get_menu_keyboard(user_id))
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        await bot.send_message(user_id, "–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
        messengers = await get_messanger_from_db()
        if messengers:
            text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
            for messenger in messengers:
                name = messenger.get('name')
                text += f"\n{str(name.get('name')).capitalize()}: {str(name.get('link'))}"

            await bot.send_message(user_id, text)
        else:
            await bot.send_message(user_id, "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ ‚òπ")


async def get_catalogs_keyboard():
    catalogs = await get_categories_from_db()
    keyboard = InlineKeyboardMarkup(row_width=2)
    for catalog in catalogs:
        catalog_id = catalog.get('_id', None)
        catalog_name = catalog.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        if catalog_id:
            button = InlineKeyboardButton(catalog_name, callback_data=f"showproduct_{catalog_id}")
            keyboard.add(button)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_menu"))
    return keyboard


@dp.callback_query_handler(text="show_menu", state="*")
async def show_menu(callback_query: types.CallbackQuery, state=FSMContext):
    await state.finish()
    user_id = callback_query.from_user.id
    keyboard = await get_menu_keyboard(user_id)
    await callback_query.message.edit_text("‚úîÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)


async def get_menu_keyboard(user_id):
    admin_user_ids = admin_user_id
    admin_user_ids.extend(await get_admins_ids_from_db())
    menu_keyboard = InlineKeyboardMarkup(row_width=2)
    catalog = InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üóÉÔ∏è", callback_data="show_catalog")
    cart = InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="showcart_")
    orders = InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã üì¶", callback_data="show_orders")
    profile = InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üëë", callback_data="show_profile")
    help = InlineKeyboardButton(text="FAQ ‚ÑπÔ∏è", callback_data="show_help")
    menu_keyboard.add(catalog)
    menu_keyboard.add(cart)
    menu_keyboard.add(orders, profile)
    if user_id in admin_user_ids:
        menu_keyboard.add(InlineKeyboardButton(text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èü§¥", callback_data="admin_panel"))
    menu_keyboard.add(help)
    return menu_keyboard


@dp.callback_query_handler(text="show_contacts")
async def show_contacts(callback_query: CallbackQuery):
    messengers = await get_messanger_from_db()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_menu"))
    text = '–ö–æ–Ω—Ç–∞–∫—Ç—ã'
    if messengers:
        for messenger in messengers:
            name = messenger.get('name')
            text += f"\n{str(name.get('name')).capitalize()}: {str(name.get('link'))}"

        await bot.edit_message_text(
            text,
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
    else:

        await bot.edit_message_text(
            '–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ ‚òπ',
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )


@dp.callback_query_handler(text="show_help")
async def show_help(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üìß", callback_data="show_contacts"))
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data="show_menu"))
    chat_id = callback.message.chat.id
    text = "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    text += "–ö–∞—Ç–∞–ª–æ–≥ üóÉÔ∏è - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
    text += "–ö–æ—Ä–∑–∏–Ω–∞ üõí - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
    text += "–ó–∞–∫–∞–∑—ã üìñ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ –∑–∞–∫–∞–∑—ã\n"
    text += "–ü—Ä–æ—Ñ–∏–ª—å üíº - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
    text += "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìß - —Å–≤—è–∑—å —Å –Ω–∞–º–∏\n"
    await bot.edit_message_text(text, chat_id, callback.message.message_id, reply_markup=keyboard)


@dp.callback_query_handler(text="show_catalog")
async def menu_catalogs(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    keyboard = await get_catalogs_keyboard()
    if callback.message.text:
        await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥:", user_id, callback.message.message_id, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥:", reply_markup=keyboard)


def resize_image(image_path):
    image = Image.open(image_path)
    temp_image_path = "temp_image.jpg"

    return temp_image_path


logger = logging.getLogger(__name__)


@dp.callback_query_handler(lambda c: c.data.startswith('showproduct_'))
async def show_category_products(callback_query: types.CallbackQuery):
    catalog_id = ObjectId(callback_query.data.split('_')[1])
    catalog_name_data[callback_query.from_user.id] = catalog_id
    products = await get_products_in_category_by_id(catalog_id)

    if products:
        for product in products:
            if product:
                product_id = product['_id']
                product_name = product['product_name']
                image_path = await get_photo_file_by_id(product['image_id'])
                name_description = product.get('name_description', ' ')
                quantity = await get_product_quantity(product_id, catalog_id)
                product_data = f"{product_id}_{catalog_id}_{product['product_price']}"
                encoded_data = base64.b64encode(product_data.encode()).decode()
                cart_button = InlineKeyboardButton(
                    text="–í –∫–æ—Ä–∑–∏–Ω—É",
                    callback_data=f"addtocart_{str(product_id)}"
                )
                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(cart_button)
                keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='show_catalog'))
                photo_caption = (
                    f"{product_name}\n‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è\n"
                    f"{name_description}\n"
                    f"–¶–µ–Ω–∞: {product['product_price']} —Å–æ–º\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product['quantity']} —à—Ç\n‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è")
                resized_image_path = resize_image(image_path)
                with open(resized_image_path, 'rb') as photo_file:
                    try:
                        await bot.send_photo(
                            chat_id=callback_query.from_user.id,
                            photo=InputFile(photo_file),
                            caption=photo_caption,
                            reply_markup=keyboard
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: {e}")
                    finally:
                        os.remove(resized_image_path)
            else:
                await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    else:
        await callback_query.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç", show_alert=True)


async def show_cart_contents(user_id):
    cart_contents = user_carts.get(user_id, {})
    if not cart_contents:
        await bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        for product_name, product_data in cart_contents.items():
            quantity = product_data['quantity']
            price = product_data['price']
            total_price = quantity * price
            await bot.send_message(user_id, f"–¢–æ–≤–∞—Ä: {product_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n–¶–µ–Ω–∞: {total_price} —Å–æ–º")


@dp.callback_query_handler(lambda c: c.data.startswith(('addtocart_', 'addname_', 'remove_')))
async def cart_operations(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    operation, product_id = callback_query.data.split('_', 1)
    product_id = ObjectId(product_id)
    user_cart = user_carts.setdefault(user_id, {})
    catalog_id = catalog_name_data.get(callback_query.from_user.id)

    if operation == 'addtocart':
        product_data = await get_product_data(product_id, catalog_id)
        if product_data:
            await add_to_cart(callback_query, user_cart, product_id, product_data['product_price'])
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    elif operation == 'addname':
        product_data = await get_product_data(product_id, catalog_id)
        if product_data:
            await add_product_to_cart(callback_query, user_cart, product_id, product_data['product_price'])
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    elif operation == 'remove':
        product_data = await get_product_data(product_id, catalog_id)
        if product_data:
            await remove_product(callback_query, user_cart, product_id, product_data['product_price'])
        else:
            await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


async def add_to_cart(callback_query, user_cart, product_id, product_price):
    catalog_id = catalog_name_data.get(callback_query.from_user.id)
    product_data = await get_product_data(product_id, catalog_id)
    if product_data:
        catalog_id = catalog_name_data.get(callback_query.from_user.id)
        available_quantity = await get_product_quantity(product_id, catalog_id)
        if available_quantity > 0:
            if product_id not in user_cart or user_cart[product_id]['quantity'] < available_quantity:
                user_cart[product_id] = {'quantity': user_cart.get(product_id, {}).get('quantity', 0) + 1,
                                         'price': product_price,
                                         'product_name': product_data['product_name']}
                await update_product_buttons(callback_query, product_id)
            else:
                await bot.answer_callback_query(callback_query.id, text="–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞",
                                                show_alert=True)
        else:
            await bot.answer_callback_query(callback_query.id, text="–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", show_alert=True)
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


async def add_product_to_cart(callback_query, user_cart, product_id, product_price):
    catalog_id = catalog_name_data.get(callback_query.from_user.id)
    product_data = await get_product_data(product_id, catalog_id)
    if product_data:
        user_cart[product_id] = {'quantity': user_cart.get(product_id, {}).get('quantity', 0) + 1,
                                 'price': product_price,
                                 'product_name': product_data['product_name']}
        await update_product_buttons(callback_query, product_id)
    else:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


async def remove_product(callback_query, user_cart, product_id, product_price):
    if product_id in user_cart:
        if user_cart[product_id]['quantity'] > 0:
            user_cart[product_id]['quantity'] -= 1
            if user_cart[product_id]['quantity'] == 0:
                del user_cart[product_id]
        await update_product_buttons(callback_query, product_id)


async def update_product_buttons(callback_query, product_id):
    count = await get_cart_quantity(callback_query.from_user.id, product_id)

    buttons = await generate_cart_buttons(product_id, count, callback_query)
    back_button = InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_catalog")

    await bot.edit_message_reply_markup(
        callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=InlineKeyboardMarkup(row_width=2).add(*buttons).add(back_button)
    )


async def generate_cart_buttons(product_id, count, callback_query):
    buttons = []
    catalog_id = catalog_name_data.get(callback_query.from_user.id)
    available_quantity = await get_product_quantity(product_id, catalog_id)
    product_data = await get_product_data(product_id, catalog_id)

    if count < available_quantity:
        add_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"addname_{product_id}")
        buttons.append(add_button)

        remove_button = types.InlineKeyboardButton("–£–±—Ä–∞—Ç—å", callback_data=f"remove_{product_id}")
        buttons.append(remove_button)

    if count > 0:
        cart_button = types.InlineKeyboardButton(f"–û—Ñ–æ—Ä–º–∏—Ç—å: {count}", callback_data=f"showcart_{product_id}")
        buttons.append(cart_button)
    else:
        add_to_cart_button = types.InlineKeyboardButton("–í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"addtocart_{product_id}")
        buttons = [add_to_cart_button]

    return buttons


async def get_cart_quantity(user_id, product_id):
    user_cart = user_carts.get(user_id, {})
    return user_cart.get(product_id, {}).get('quantity', 0)


# –ö–æ—Ä–∑–∏–Ω–∞
@dp.callback_query_handler(lambda c: c.data.startswith('showcart_'))
async def show_cart(callback_query: types.CallbackQuery):
    catalog_id = catalog_name_data.get(callback_query.from_user.id)
    user_id = callback_query.from_user.id
    user_cart = user_carts.get(user_id, {})
    operation, product_id = callback_query.data.split('_')
    product_data = await get_product_data(product_id, catalog_id)
    available_quantity = await get_product_quantity(product_id, catalog_id)
    if not user_cart:
        await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    items = []
    total_price = 0

    for product_id, product_data in user_cart.items():
        product_name = product_data['product_name']
        quantity = product_data['quantity']
        price = product_data['price']
        total_price += quantity * price
        items.append(f"‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è\n{product_name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûñ {quantity} —à—Ç.\n–ü–æ —Ü–µ–Ω–µ ‚ûñ {price} —Å–æ–º")

    text = f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n\n" + "\n".join(items) + f"\n\n‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è‚ôæÔ∏è\n–í—Å–µ–≥–æ –Ω–∞ —Å—É–º–º—É: {total_price} —Å–æ–º"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üí∏", callback_data="checkout"))
    markup.add(InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóë", callback_data="clear_cart"))
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_menu"))

    if callback_query.message.text:
        await bot.edit_message_text(text, user_id, callback_query.message.message_id, reply_markup=markup)
    else:
        await bot.send_message(user_id, text, reply_markup=markup)

    user_carts[user_id] = user_cart


def calculate_total_price(user_id):
    user_cart = user_carts.get(user_id, {})
    total_price = sum(product_data['quantity'] * product_data['price'] for product_data in user_cart.values())
    return total_price


def get_cart_sum(user_id):
    user_cart = user_carts.get(user_id, {})
    total_quantity = sum(product_data['quantity'] for product_data in user_cart.values())
    return total_quantity


@dp.callback_query_handler(lambda c: c.data == "checkout")
async def checkout(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_in_black_list = await get_blacklist_info(user_id)
    user_info = await get_user(user_id)
    user_cart = user_carts.get(user_id, {})

    if not user_cart:
        await bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    if not user_in_black_list:
        if user_info:
            await SetDeliveryState.waiting_for_delivery.set()

            markup = types.InlineKeyboardMarkup()
            pickup_button = types.InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="–°–∞–º–æ–≤—ã–≤–æ–∑")
            delivery_button = types.InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º", callback_data="–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º")
            markup.add(pickup_button, delivery_button)
            markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='canceldelivery'))
            await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", user_id,
                                        callback_query.message.message_id,
                                        reply_markup=markup)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Ñπ', callback_data="register_new"))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="–Ω–∞–∑–∞–¥"))
            await bot.edit_message_text("‚Ñπ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                                        callback_query.from_user.id,
                                        callback_query.message.message_id,
                                        reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üìß", callback_data="show_contacts"))
        await bot.edit_message_text("–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", user_id,
                                    callback_query.message.message_id,
                                    reply_markup=keyboard)

    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'canceldelivery')
async def canceldelivery(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = callback_query.from_user.id
    await bot.edit_message_text('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', user_id, callback_query.message.message_id,
                                reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data == "register_new")
async def register_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='canceladdnewname'))
    message = await bot.send_message(user_id, "‚úç –í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=keyboard)
    await AddNewPerson.add_name.set()
    await state.update_data(register_message_id=message.message_id)


@dp.message_handler(lambda message: message.text and not re.match(r'^[0-9\+\-\(\)]+$', message.text),
                    state=AddNewPerson.add_name)
async def register_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='canceladdnewnumber'))
    await message.answer(
        "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    await AddNewPerson.add_number.set()


@dp.message_handler(lambda message: not ''.join(filter(str.isdigit, message.text)), state=AddNewPerson.add_number)
async def handle_non_digit_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        register_message_id = data.get("register_message_id")
        if register_message_id:
            await bot.delete_message(message.chat.id, register_message_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='canceladdnewnumber'))
    await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", reply_markup=keyboard)
    data = await state.get_data()
    register_message_id = data.get("register_message_id")
    if register_message_id:
        await bot.delete_message(message.chat.id, register_message_id)


@dp.message_handler(lambda message: re.match(r'^[0-9\(\)]+$', message.text), state=AddNewPerson.add_number)
async def register_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = ''.join(filter(str.isdigit, message.text))
    text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
    if len(data['number']) < 2:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='canceladdnewnumber'))
        await message.answer(text, reply_markup=keyboard)
        return

    user_id = message.from_user.id
    name = data['name']
    number = data['number']
    await add_user(user_id, name, number)

    await state.finish()

    keyboard_get_katalog = InlineKeyboardMarkup()
    keyboard_get_katalog.add(InlineKeyboardButton('üõÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é', callback_data="checkout"))
    keyboard_get_katalog.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data="show_menu"))
    await message.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=keyboard_get_katalog)


@dp.callback_query_handler(lambda c: c.data == 'canceladdnewname', state=AddNewPerson.add_name)
async def canceladdnewname(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = callback_query.from_user.id
    await bot.edit_message_text('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', user_id, callback_query.message.message_id,
                                reply_markup=keyboard)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'canceladdnewnumber', state=AddNewPerson.add_number)
async def canceladdnewnumber(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = callback_query.from_user.id
    await bot.edit_message_text('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', user_id, callback_query.message.message_id,
                                reply_markup=keyboard)
    await state.finish()


def calculate_total_price(user_id):
    user_cart = user_carts.get(user_id, {})
    total_price = sum(product_data['quantity'] * product_data['price'] for product_data in user_cart.values())
    return total_price


@dp.callback_query_handler(lambda c: c.data == "–°–∞–º–æ–≤—ã–≤–æ–∑" or c.data == "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º")
async def process_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = callback_query.from_user.id
    delivery_type = callback_query.data
    user_cart = user_carts.get(user_id, {})
    catalog_id = catalog_name_data.get(callback_query.from_user.id)
    total_price = calculate_total_price(user_id)
    if not user_cart:
        await bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", reply_markup=keyboard)
        return

    if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        pickup_address = await get_pickup_address()

        if pickup_address:
            await state.finish()
            order_id = await save_order(user_id, "–°–∞–º–æ–≤—ã–≤–æ–∑", total_price, user_cart, catalog_id,
                                        pickup_address.get("pickup"))
            text = f'‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É:\n'
            text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            text += f'{pickup_address.get("pickup")}\n'
            text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            text += f"‚úÖ –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n{order_id}"

            await bot.send_message(user_id, text, reply_markup=keyboard)
            await send_order_to_admins(user_id, user_cart, total_price, "–°–∞–º–æ–≤—ã–≤–æ–∑", order_id,
                                       pickup_address.get("pickup"))
            user_carts.pop(user_id, None)
        else:
            await state.finish()
            await bot.send_message(user_id, "–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                                   reply_markup=keyboard)
    elif delivery_type == "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º":
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        await DeliveryState.waiting_for_address.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state=DeliveryState.waiting_for_address)
async def process_delivery_address(message: types.Message, state: FSMContext):
    delivery_address = message.text
    user_id = message.from_user.id
    catalog_id = catalog_name_data.get(message.from_user.id)
    await state.finish()
    user_cart = user_carts.get(user_id, {})
    catalog_name = catalog_name_data.get(user_id)
    total_price = calculate_total_price(user_id)
    order_id = await save_order(user_id, "–°–∞–º–æ–≤—ã–≤–æ–∑", total_price, user_cart, catalog_id, delivery_address)
    await send_order_to_admins(user_id, user_cart, total_price, "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º", order_id, delivery_address)
    text = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f"–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{order_id}\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f'–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n'
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f'{delivery_address}\n'
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f'‚úÖ –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n'
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    await message.answer(text, reply_markup=keyboard)
    user_carts.pop(user_id, None)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_user_cart(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = callback_query.from_user.id
    user_carts.pop(user_id, None)
    await state.finish()
    await bot.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", user_id, callback_query.message.message_id,
                                reply_markup=keyboard)


async def send_order_to_admins(user_id, user_cart, total_price, delivery_type, order_id, delivery_address):
    current_time = datetime.now()
    admin_chat_id = GROUP_CHAT_ID
    user_info = await get_user(user_id)
    user = await bot.get_chat(user_id)
    username = user.username
    if not user_info:
        return

    text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nt.me/{username}\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f"ID: {user_id}\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:\n{order_id}\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f"–ò–º—è: {user_info['name']}\n"
    text += f"–¢–µ–ª.–Ω–æ–º–µ—Ä: {user_info['number']}\n"
    text += f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {current_time}\n"
    text += f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
    text += f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type}\n"
    if delivery_type == "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º":
        text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{delivery_address}\n"
    elif delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        text += f"–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:\n{delivery_address}\n"
    text += "–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"

    for product_id, product_data in user_cart.items():
        text += f"‚ûñ {product_data['product_name']}: {product_data['quantity']} —à—Ç. | {product_data['price'] * product_data['quantity']} —Å–æ–º\n"

    text += f"–ò—Ç–æ–≥–æ: {total_price} —Å–æ–º"

    await bot.send_message(admin_chat_id, text)


@dp.callback_query_handler(text="show_orders")
async def show_orders(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    order_history = await get_order_history(user_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data="show_menu"))
    count_products = 0
    count_price = 0
    current_time = datetime.now()
    if not order_history:
        await callback_query.answer("–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤", show_alert=True)
        return
    else:
        order_info = ""
        info_total_orders = 0
        info_total_products = 0
        count_orders = 0
        for order in order_history:
            info_total_orders += 1
            order_info += (
                f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                f"–ó–∞–∫–∞–∑:\nNo{str(order['_id'])}\n"
                f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order['delivery_type']}\n"
                f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order['order_time']}\n"
                "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
            )
            count_products += 1
            count_price += float(order['total_price'])
            for product in order['products']:
                info_total_products += 1
                product_name = product['product_name']
                quantity = product['quantity']
                price = product['price']
                order_info += f"‚û°Ô∏è {product_name}\n‚û°Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç. –ü–æ —Ü–µ–Ω–µ: {price} —Å–æ–º\n"
            count_orders += float(order['total_price'])
            order_info += f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {float(order['total_price'])}\n"
        order_info += '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
        order_info += f"–ü–æ–∫—É–ø–æ–∫ ‚ûñ {info_total_orders}\n–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ ‚ûñ {info_total_products}\n–û–±—â–∞—è —Å—É–º–º–∞ ‚ûñ {count_orders}\n"
        await bot.send_message(user_id, order_info, reply_markup=keyboard)


@dp.callback_query_handler(text="show_profile", state="*")
async def show_profile(callback_query: types.CallbackQuery, state=FSMContext):
    user_id = callback_query.from_user.id
    user_info = await get_user(user_id)
    await state.finish()

    if user_info:
        user_name = user_info.get('name', "–û–±–Ω–æ–≤–∏—Ç–µ")
        user_number = user_info.get('number', "–û–±–Ω–æ–≤–∏—Ç–µ")
        response = f"üÜî–í–∞—à ID: {user_info['user_id']}\n"
        response += f"üõÇ–í–∞—à–µ –∏–º—è: {user_name}\n"
        response += f"‚òéÔ∏è–í–∞—à –Ω–æ–º–µ—Ä: {user_number}"

        personal_change = InlineKeyboardMarkup(row_width=1)
        personal_change.add(
            InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚¨Ö", callback_data="change_name_"),
        )
        personal_change.add(
            InlineKeyboardButton("‚òéÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä ‚¨Ö", callback_data="change_number_"),
        )
        personal_change.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='show_menu'))

        try:
            await bot.edit_message_text(
                response, user_id, callback_query.message.message_id,
                reply_markup=personal_change
            )
        except MessageToEditNotFound:
            await bot.send_message(user_id, response, reply_markup=personal_change)



    else:
        personal_kb = InlineKeyboardMarkup(row_width=2)
        personal_kb.add(
            InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Ñπ", callback_data="register"),
        )
        personal_kb.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_menu"),
        )
        await bot.edit_message_text("‚ùó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å ‚ùó", user_id, callback_query.message.message_id,
                                    reply_markup=personal_kb)


@dp.callback_query_handler(lambda c: c.data == "change_name_")
async def change_name(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    message_text = "üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="show_profile"))

    try:
        await bot.edit_message_text(message_text, user_id, callback_query.message.message_id,
                                    reply_markup=keyboard)
    except MessageToEditNotFound:
        await bot.send_message(user_id, message_text, reply_markup=keyboard)

    await UpdateUserData.change_name.set()


@dp.message_handler(state=UpdateUserData.change_name)
async def set_new_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    back_button = InlineKeyboardMarkup()
    back_button.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="show_profile"))

    if not new_name:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return

    user_id = message.from_user.id
    updated = await update_user_name(user_id, new_name)

    if updated:
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await message.answer(text="‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=back_button)
    else:
        await message.answer(text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                             reply_markup=back_button)

    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "change_number_")
async def change_number(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    message_text = "üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="show_profile"))

    try:
        await bot.edit_message_text(message_text, user_id, callback_query.message.message_id,
                                    reply_markup=keyboard)
    except MessageToEditNotFound:
        await bot.send_message(user_id, message_text, reply_markup=keyboard)

    await UpdateUserData.change_number.set()


@dp.message_handler(state=UpdateUserData.change_number)
async def set_new_number(message: types.Message, state: FSMContext):
    new_number = re.sub(r'[^0-9]', '', message.text)
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="show_profile"))

    if not re.match(r'^\d{5,}$', new_number):
        await message.answer(text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:",
                             reply_markup=keyboard)
        return

    updated = await update_user_number(user_id, new_number)

    if updated:
        await bot.delete_message(message.chat.id, message.message_id - 1)
        back_button = InlineKeyboardMarkup()
        back_button.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_profile'))
        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=back_button)
    else:
        back_button = InlineKeyboardMarkup()
        back_button.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_profile'))
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                             reply_markup=back_button)

    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data == "register", state="*")
async def register_start(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="show_menu"))
    message = await bot.send_message(callback_query.message.chat.id, "üî§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è:",
                                     reply_markup=keyboard)
    await AddPerson.add_name.set()
    await state.update_data(register_message_id=message.message_id)


@dp.message_handler(lambda message: message.text and not re.match(r'^[0-9\+\-\(\)]+$', message.text),
                    state=AddPerson.add_name)
async def register_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="show_menu"))
    await bot.send_message(
        message.chat.id,
        "‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\nüî§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=keyboard
    )
    await AddPerson.add_number.set()
    data = await state.get_data()
    register_message_id = data.get("register_message_id")
    if register_message_id:
        await bot.delete_message(message.chat.id, register_message_id)


@dp.message_handler(lambda message: not ''.join(filter(str.isdigit, message.text)),
                    state=AddPerson.add_number)
async def handle_non_digit_input(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='show_menu'))
    await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.", reply_markup=keyboard)
    await bot.edit_message_text(
        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.",
        message.from_user.id,
        message.message_id,
        reply_markup=keyboard
    )


@dp.message_handler(lambda message: re.match(r'^[0-9\(\)]+$', ''.join(filter(str.isdigit, message.text))),
                    state=AddPerson.add_number)
async def register_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number'] = ''.join(filter(str.isdigit, message.text))
    text = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
    if len(data['number']) < 2:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è', callback_data='show_menu'))
        await message.answer(text, reply_markup=keyboard)
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='show_menu'))
    user_id = message.from_user.id
    name = data['name']
    number = data['number']
    await add_user(user_id, name, number)

    await state.finish()
    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=keyboard)


#################################################################################################
@dp.callback_query_handler(text="admin_panel", state="*")
async def show_admin_panel(callback_query: types.CallbackQuery, state=FSMContext):
    user_id = callback_query.from_user.id

    async def get_admin_inline_keyboard():
        admin_inline_keyboard = InlineKeyboardMarkup(row_width=2)
        admins = InlineKeyboardButton("ü§¥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admins")
        catalogsandproduct = InlineKeyboardButton("üëÄ –ö–∞—Ç–∞–ª–æ–≥–∏ –∏ –¢–æ–≤–∞—Ä—ã", callback_data="catalogsandproduct")
        main_menu_show = InlineKeyboardButton("üèÉüèª‚Äç‚ôÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_menu")
        admin_inline_keyboard.add(admins)
        admin_inline_keyboard.add(catalogsandproduct)
        admin_inline_keyboard.add(main_menu_show)
        return admin_inline_keyboard

    text = "üîë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    await bot.edit_message_text(text, user_id, callback_query.message.message_id,
                                reply_markup=await get_admin_inline_keyboard())

    @dp.callback_query_handler(lambda c: c.data == "contacts")
    async def process_contacts(callback_query: CallbackQuery):
        messengers = await get_messanger_from_db()

        if not messengers:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("ü§å –î–æ–±–∞–≤–∏—Ç—å", callback_data="addcontact"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
            await bot.edit_message_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
                callback_query.from_user.id,
                callback_query.message.message_id,
                reply_markup=keyboard
            )
        else:
            await show_contacts(callback_query)

    async def show_contacts(callback_query: CallbackQuery):
        messengers = await get_messanger_from_db()
        keyboard = InlineKeyboardMarkup()

        for messenger in messengers:
            name = messenger.get("name", {}).get("name", "")
            link = messenger.get("name", {}).get("link", "")
            button = InlineKeyboardButton(f"{name.capitalize()}: {link}", callback_data=f"contact_{name}")
            keyboard.add(button)

        keyboard.add(
            InlineKeyboardButton("üë∑ –î–æ–±–∞–≤–∏—Ç—å", callback_data="addcontact"),
            InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="deletecontact")
        )
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))

        await bot.edit_message_text(
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìß",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data == "deletecontact")
    async def delete_contact(callback_query: CallbackQuery):
        messengers = await get_messanger_from_db()
        keyboard = InlineKeyboardMarkup()

        for messenger in messengers:
            name = messenger.get("name", {}).get("name", "")
            link = messenger.get("name", {}).get("link", "")
            button = InlineKeyboardButton(f"{str(name).capitalize()}",
                                          callback_data=f"deletecontact_{str(name).strip()}")
            keyboard.add(button)

        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admins"))
        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data.startswith("deletecontact_"))
    async def confirm_delete(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admins"))
        name = callback_query.data.split("_")[1].strip()
        all_contacts = await get_messanger_from_db()
        await remove_contact_from_db(name)

        await bot.edit_message_text(
            f"–ö–æ–Ω—Ç–∞–∫—Ç {name} —É–¥–∞–ª–µ–Ω",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data == "addcontact")
    async def add_contact(callback: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admins"))
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞:",
            callback.from_user.id,
            callback.message.message_id,
            reply_markup=keyboard
        )
        await AddContactState.waiting_for_contact.set()

    @dp.message_handler(state=AddContactState.waiting_for_contact)
    async def add_contact_name(message: types.Message, state: FSMContext):
        name = message.text.lower()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admins"))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–Ω–æ–º–µ—Ä, —Å—Å—ã–ª–∫—É –∏ —Ç.–ø):", reply_markup=keyboard)
        await state.update_data(name=name)
        await AddContactState.next()

    @dp.message_handler(state=AddContactState.waiting_for_messanger)
    async def add_contact_data(message: types.Message, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
        data = await state.get_data()
        name = data.get("name")
        contact_data = message.text

        new_contact = {
            "name": name,
            "link": contact_data
        }

        await addmessanger(new_contact)

        await state.finish()
        await message.answer(
            f"–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä {name}:{contact_data} –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data == "get_pickup_address")
    async def get_pickup_address_handler(callback_query: CallbackQuery):
        address = await get_pickup_address()

        if address:
            text = f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {address.get('pickup')}"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üó£ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="updateadress"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
            await bot.edit_message_text(text, callback_query.from_user.id, callback_query.message.message_id,
                                        reply_markup=keyboard)
        else:
            text = "–ê–¥—Ä–µ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üó£ –î–æ–±–∞–≤–∏—Ç—å", callback_data="addpickup_address"))
            keyboard.add(InlineKeyboardButton("üèÉ–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
            await bot.edit_message_text(text, callback_query.from_user.id, callback_query.message.message_id,
                                        reply_markup=keyboard)

    # –°–∞–º–æ–≤—ã–≤–æ–∑
    @dp.callback_query_handler(lambda c: c.data == "addpickup_address", state="*")
    async def addpickup_address(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admin_panel"))
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard
        )
        await PickupAddressState.waiting_for_address.set()

    @dp.message_handler(state=PickupAddressState.waiting_for_address)
    async def process_pickup_address(message: types.Message, state: FSMContext):
        pickup_address = message.text

        await add_pickup_address(pickup_address)

        await state.finish()
        await bot.send_message(
            message.from_user.id,
            f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pickup_address}",
            reply_markup=await get_admin_inline_keyboard()
        )

    # –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
    @dp.callback_query_handler(lambda c: c.data == "updateadress")
    async def update_address(callback_query: CallbackQuery):
        await bot.send_message(callback_query.from_user.id, "üêå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        await UpdateAddressState.waiting_for_new_address.set()

    @dp.message_handler(state=UpdateAddressState.waiting_for_new_address)
    async def process_new_address(message: types.Message, state: FSMContext):
        new_address = message.text
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
        await update_pickup_address(new_address)
        await state.finish()
        await bot.send_message(message.from_user.id, f"üß≥ –ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:\n{new_address}",
                               reply_markup=keyboard)

    # –†–∞—Å—Å—ã–ª–∫–∞
    @dp.callback_query_handler(lambda c: c.data == "send_message")
    async def send_message_to_all(callback: types.CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
            callback.from_user.id, callback.message.message_id,
            reply_markup=keyboard)
        await Broadcast.waiting_text.set()

    @dp.message_handler(state=Broadcast.waiting_text)
    async def set_broadcast_text(message: types.Message, state: FSMContext):
        confirm_keyboard = InlineKeyboardMarkup(row_width=2)
        confirm_button = InlineKeyboardButton(text="ü§∑‚Äç‚ôÇÔ∏è –î–∞", callback_data="confirm_yes")
        cancel_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="admins")
        confirm_keyboard.add(confirm_button, cancel_button)
        await state.update_data(text=message.text)

        await message.answer("üï∂ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=confirm_keyboard)

    @dp.callback_query_handler(text="confirm_yes", state=Broadcast.waiting_text)
    async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="admins"))
        data = await state.get_data()
        text = data.get("text")
        users = await get_users_from_db()
        successful_count = 0

        for user in users:
            try:
                await bot.send_message(user["user_id"], text)
                successful_count += 1
            except ChatNotFound:
                pass

        await bot.edit_message_text(
            f"üï∂ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_count} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            callback.from_user.id, callback.message.message_id,
            reply_markup=keyboard
        )

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –µ—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—É—Å–∫–∞, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ main.py –Ω–∞ —Å–≤–æ—ë
    @dp.callback_query_handler(lambda c: c.data == 'restart_bot')
    async def confirm_restart(callback_query: types.CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        confirm_button = InlineKeyboardButton("üö∏ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data='confirm_restart')
        cancel_button = InlineKeyboardButton("‚òÑ–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admin_panel')
        keyboard.add(confirm_button, cancel_button)
        await bot.edit_message_text(
            "ü§¶‚Äç‚ôÄÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == 'confirm_restart')
    async def restart_bot(callback_query: types.CallbackQuery):
        await callback_query.answer("üíÜ‚Äç‚ôÄÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...\n–û–∂–∏–¥–∞–π—Ç–µ –º–∏–Ω—É—Ç–æ—á–∫—É...", show_alert=True)
        await dp.storage.close()
        await dp.storage.wait_closed()
        subprocess.run("python main.py", shell=True)

    @dp.callback_query_handler(lambda c: c.data == 'cancel_restart')
    async def cancel_restart(callback_query: types.CallbackQuery):
        await bot.edit_message_text(
            "üï∫ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=await get_admin_inline_keyboard())

    async def get_addproduct_keyboard():
        catalogs = await get_categories_from_db()
        keyboard = InlineKeyboardMarkup()

        for category in catalogs:
            category_name = category.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            button = InlineKeyboardButton(category_name, callback_data=f"catalog_{category_name}")
            keyboard.add(button)

        return keyboard

    @dp.callback_query_handler(lambda callback_query: callback_query.data == "admins", state='*')
    async def admins_keyboard(callback_query: types.CallbackQuery, state=FSMContext):
        await state.finish()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        keyboard = InlineKeyboardMarkup(row_width=2)
        addmin = InlineKeyboardButton('üßë‚Äç‚úàÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data="addadmin_")
        delmin = InlineKeyboardButton('‚ò†Ô∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data="listadmins_")
        add_black_list = InlineKeyboardButton("ü§° –î–æ–±–∞–≤–∏—Ç—å –≤ —á—Å", callback_data="addblacklist_")
        del_black_list = InlineKeyboardButton("ü§ê –£–±—Ä–∞—Ç—å –∏–∑ —á—Å", callback_data="blacklist_")
        contactadd = InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã üìß", callback_data="contacts")
        adress = InlineKeyboardButton("üõ¨ –ê–¥—Ä–µ—Å", callback_data="get_pickup_address")
        stats = InlineKeyboardButton('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data="stats")
        send_message_to_all = InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_message")
        # user_info_page = InlineKeyboardButton('ü™™ –õ—é–¥–∏', callback_data="select_user")
        # restart_bot = InlineKeyboardButton('ü´° –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞?', callback_data="restart_bot")
        keyboard.add(addmin, delmin)
        keyboard.add(add_black_list, del_black_list)
        keyboard.add(adress, contactadd)
        keyboard.add(send_message_to_all, stats)
        # keyboard.add(user_info_page)
        # keyboard.add(restart_bot)
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data="admin_panel"))
        await bot.edit_message_text(text,
                                    callback_query.from_user.id,
                                    callback_query.message.message_id,
                                    reply_markup=keyboard
                                    )

    @dp.callback_query_handler(lambda callback_query: callback_query.data == "catalogsandproduct", state='*')
    async def admins_keyboard(callback_query: types.CallbackQuery, state: FSMContext):
        text = "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ —Ç–æ–≤–∞—Ä?"
        keyboard = InlineKeyboardMarkup(row_width=2)
        catalog = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥üåö", callback_data="addcategory_")
        delcatalog = InlineKeyboardButton("üåù–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="deletecategory_")
        addproduct = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Äüëâ", callback_data="addproduct_")
        delproduct = InlineKeyboardButton("üëà–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="deleteproduct_")
        edit_catalog = InlineKeyboardButton("üê∫ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="editcatalogname_")
        editor = InlineKeyboardButton("ü§ù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data='editproduct_')
        keyboard.add(catalog, delcatalog)
        keyboard.add(addproduct, delproduct)
        keyboard.add(edit_catalog)
        keyboard.add(editor)
        keyboard.add(InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data="admin_panel"))
        await bot.edit_message_text(text,
                                    callback_query.from_user.id,
                                    callback_query.message.message_id,
                                    reply_markup=keyboard
                                    )
        await state.finish()

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("editcatalogname_"), state='*')
    async def update_catalog_name_with_selection(callback_query: types.CallbackQuery, state: FSMContext):
        try:
            categories = await get_categories_from_db()

            if not categories:
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
                await bot.edit_message_text(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    callback_query.from_user.id, callback_query.message.message_id,
                    reply_markup=keyboard)
                return

            keyboard = InlineKeyboardMarkup()
            for category in categories:
                category_name = category.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                keyboard.add(InlineKeyboardButton(category_name, callback_data=f"updatecatalogname_{category['_id']}"))

            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))

            await bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard
            )
            await state.update_data(categories=categories)
            await state.set_state('waiting_for_catalog_selection')

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {e}")

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("updatecatalogname_"),
                               state='waiting_for_catalog_selection')
    async def process_catalog_selection(callback_query: types.CallbackQuery, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
        try:
            catalog_id = callback_query.data.split("_")[1]
            await state.update_data(catalog_id=catalog_id)
            await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞:",
                                   reply_markup=keyboard)
            await state.set_state('edit_catalog_name')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

    @dp.message_handler(state='edit_catalog_name')
    async def process_new_catalog_name(message: types.Message, state: FSMContext):
        new_name = message.text
        state_data = await state.get_data()
        catalog_id = state_data.get('catalog_id')
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))

        try:
            await update_catalog_name(catalog_id, new_name)
            await message.reply("ü´† –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=keyboard)
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: {e}", reply_markup=keyboard)

        await state.finish()

    @dp.callback_query_handler(lambda c: c.data == "editproduct_", state="*")
    async def choose_category_for_edit(callback_query: types.CallbackQuery):
        categories = await get_categories_from_db()

        if not categories:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await bot.edit_message_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
            return

        keyboard = InlineKeyboardMarkup()
        for category in categories:
            category_name = category.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            keyboard.add(InlineKeyboardButton(category_name, callback_data=f"editproduct_{category['_id']}"))

        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))

        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)
        await EditProduct.select_category.set()

    @dp.callback_query_handler(lambda c: c.data.startswith("editproduct_"), state=EditProduct.select_category)
    async def choose_product_category_for_edit(callback_query: types.CallbackQuery, state: FSMContext):
        selected_category = callback_query.data.split('_')[1]
        products = await get_products_in_category_by_id(ObjectId(selected_category))

        if not products:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞—Ç–∞–ª–æ–≥?", callback_data="editproduct_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await bot.edit_message_text(
                "–í —ç—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
            await state.finish()
            return

        product_buttons = []
        for product in products:
            product_id = str(product['_id'])
            product_name = product['product_name']
            product_buttons.append(
                InlineKeyboardButton(product_name,
                                     callback_data=f"editconfirmed_{selected_category}_{product_id}")
            )

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(*product_buttons)
        keyboard.add(InlineKeyboardButton("üîô –ü–µ—Ä–µ–¥—É–º–∞–ª–∏ ?", callback_data='editproduct_'))

        await state.update_data(selected_category=selected_category)
        await EditProduct.select_product.set()

        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data.startswith("editconfirmed_"), state=EditProduct.select_product)
    async def edit_confirmed(callback_query: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_category = state_data.get('selected_category')
        data_parts = callback_query.data.split("_")
        product_id = data_parts[2]
        product = await get_product_by_id(ObjectId(selected_category), ObjectId(product_id))
        if product:
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('product_name')}",
                                     callback_data=f"edit_name_{product_id}"),
                InlineKeyboardButton(f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.get('name_description')}",
                                     callback_data=f"edit_description_{product_id}"),
                InlineKeyboardButton(f"–¶–µ–Ω–∞: {product.get('product_price')}", callback_data=f"edit_price_{product_id}"),
                InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.get('quantity')}",
                                     callback_data=f"edit_quantity_{product_id}"),
                InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='editproduct_')
            )
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                                   reply_markup=keyboard)
            await EditProduct.select_attribute.set()
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", callback_data=f"editproduct_{selected_category}"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='editproduct_'))
            await bot.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard
            )

    @dp.callback_query_handler(lambda c: c.data.startswith("edit_name_"), state=EditProduct.select_attribute)
    async def edit_name(callback_query: types.CallbackQuery, state: FSMContext):
        product_id = callback_query.data.split("_")[2]

        await state.update_data(selected_attribute="product_name", product_id=product_id)
        await EditProduct.enter_new_data.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    @dp.callback_query_handler(lambda c: c.data.startswith("edit_description_"), state=EditProduct.select_attribute)
    async def edit_description(callback_query: types.CallbackQuery, state: FSMContext):
        product_id = callback_query.data.split("_")[2]
        await state.update_data(selected_attribute="name_description", product_id=product_id)
        await EditProduct.enter_new_data.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    @dp.callback_query_handler(lambda c: c.data.startswith("edit_price_"), state=EditProduct.select_attribute)
    async def edit_price(callback_query: types.CallbackQuery, state: FSMContext):
        product_id = callback_query.data.split("_")[2]
        await state.update_data(selected_attribute="product_price", product_id=product_id)
        await EditProduct.enter_new_data.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")

    @dp.callback_query_handler(lambda c: c.data.startswith("edit_quantity_"), state=EditProduct.select_attribute)
    async def edit_quantity(callback_query: types.CallbackQuery, state: FSMContext):
        product_id = callback_query.data.split("_")[2]
        await state.update_data(selected_attribute="quantity", product_id=product_id)
        await EditProduct.enter_new_data.set()
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")

    @dp.message_handler(state=EditProduct.enter_new_data)
    async def process_new_data(message: types.Message, state: FSMContext):
        new_data = message.text
        state_data = await state.get_data()
        selected_attribute = state_data.get('selected_attribute')
        product_id = state_data.get('product_id')
        catalog_id = state_data.get('selected_category')
        keyboard = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct')
        keyboard.add(cancel_button)

        attribute_mapping = {
            'product_price': '—Ü–µ–Ω—ã',
            'name_description': '–æ–ø–∏—Å–∞–Ω–∏—è',
            'product_name': '–Ω–∞–∑–≤–∞–Ω–∏—è',
            'quantity': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'
        }

        attribute_name = attribute_mapping.get(selected_attribute, selected_attribute)

        try:
            await update_product_attribute(catalog_id, product_id, selected_attribute, new_data)
            await message.reply(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {attribute_name} —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=keyboard)
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {attribute_name} —Ç–æ–≤–∞—Ä–∞: {e}",
                                reply_markup=keyboard)

        await state.finish()

    # –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
    @dp.callback_query_handler(lambda callback_query: callback_query.data == "addadmin_")
    async def add_admin_select_user(callback_query: types.CallbackQuery, state: FSMContext):
        users = await get_users_from_db()

        if users:
            keyboard = InlineKeyboardMarkup()
            for user in users:
                user_id = user['user_id']
                user_name = user.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
                user_number = user.get('number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')
                button_text = f"‚úÖ ID:{user_id}, üé´ {user_name}"
                button = InlineKeyboardButton(button_text, callback_data=f"select_user_{user_id}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text("üéñ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:",
                                        callback_query.from_user.id, callback_query.message.message_id,
                                        reply_markup=keyboard)
            await UserForm.add_admin.set()
        else:
            await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
                                   reply_markup=await get_admin_inline_keyboard())

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('select_user_'),
                               state=UserForm.add_admin)
    async def select_user_for_admin(callback_query: types.CallbackQuery, state: FSMContext):
        user_id = int(callback_query.data.split('_')[2])
        user = await get_user(user_id)

        if user:
            user_name = user.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            user_number = user.get('number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')

            await state.update_data(admin_id=user_id, user_name=user_name,
                                    user_number=user_number)

            user_data = await state.get_data()
            user_id = user_data['admin_id']
            user_name = user_data['user_name']
            user_number = user_data['user_number']

            inserted_id = await add_admin_to_db(user_id, user_name, user_number)

            keyboard = InlineKeyboardMarkup()

            if inserted_id:
                keyboard.add(InlineKeyboardButton('üîÅ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data="addadmin_"))
                keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
                await bot.edit_message_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}, –∏–º–µ–Ω–µ–º '{user_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                    callback_query.from_user.id, callback_query.message.message_id,
                    reply_markup=keyboard)
            else:
                keyboard.add(InlineKeyboardButton('üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?', callback_data="addadmin_"))
                keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
                await bot.edit_message_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                    callback_query.from_user.id, callback_query.message.message_id,
                    reply_markup=keyboard)

            await state.finish()

    # –î–æ–±–∞–≤–∏—Ç—å –≤ —á—Å
    @dp.callback_query_handler(lambda callback_query: callback_query.data == "addblacklist_")
    async def add_black_list_select_user(callback_query: types.CallbackQuery, state: FSMContext):
        users = await get_users_from_db()

        if users:
            keyboard = InlineKeyboardMarkup()
            for user in users:
                user_id = user['user_id']
                user_name = user.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
                user_number = user.get('number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')
                button_text = f"‚úÖ ID:{user_id}, üé´ {user_name}"
                button = InlineKeyboardButton(button_text, callback_data=f"select_user_{user_id}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
            await UserForm.black_list.set()
        else:
            await bot.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=await get_admin_inline_keyboard())

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('select_user_'),
                               state=UserForm.black_list)
    async def select_user_for_admin(callback_query: types.CallbackQuery, state: FSMContext):
        user_id = int(callback_query.data.split('_')[2])
        user = await get_user(user_id)

        if user:
            user_name = user.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            user_number = user.get('number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')

            await state.update_data(admin_id=user_id, user_name=user_name,
                                    user_number=user_number)

            user_data = await state.get_data()
            user_id = user_data['admin_id']
            user_name = user_data['user_name']
            user_number = user_data['user_number']

            inserted_id = await add_user_to_black_list(user_id, user_name, user_number)

            keyboard = InlineKeyboardMarkup()

            if inserted_id:
                keyboard.add(InlineKeyboardButton('üîÅ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', callback_data="addblacklist_"))
                keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
                await bot.edit_message_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id}, –∏–º–µ–Ω–µ–º '{user_name}' –∏ –Ω–æ–º–µ—Ä–æ–º '{user_number}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                    callback_query.from_user.id, callback_query.message.message_id,
                    reply_markup=keyboard)


            else:
                keyboard.add(InlineKeyboardButton('üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?', callback_data="addblacklist_"))
                keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
                await bot.edit_message_text(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                    callback_query.from_user.id, callback_query.message.message_id,
                    reply_markup=keyboard)

            await state.finish()

    # –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
    @dp.callback_query_handler(lambda callback_query: callback_query.data == "listadmins_")
    async def list_admins(callback_query: types.CallbackQuery):
        admins_info = await get_admins_from_db()
        if not admins_info:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            for admin in admins_info:
                user_id = admin['user_id']
                user_name = admin.get('user_name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
                user_number = admin.get('user_number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')
                button_text = f"‚ùå –ò–º—è:{user_name}, ID: {user_id}"
                button = InlineKeyboardButton(button_text, callback_data=f"delete_admin_{user_id}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('delete_admin_'))
    async def delete_admin(callback_query: types.CallbackQuery):
        user_id = int(callback_query.data.split('_')[2])

        admin_info = await get_admin_info(user_id)
        user_info = await get_user(user_id)

        admin_name = '–ù–µ—Ç –∏–º–µ–Ω–∏'
        admin_number = '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞'
        keyboard = InlineKeyboardMarkup()

        if admin_info:
            admin_name = admin_info.get('user_name', admin_name)
            admin_number = admin_info.get('user_number', admin_number)

        user_name = '–ù–µ—Ç –∏–º–µ–Ω–∏'
        user_number = '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞'

        if user_info:
            user_name = user_info.get('name', user_name)
            user_number = user_info.get('number', user_number)

        if admin_info:
            keyboard.add(InlineKeyboardButton('üîÅ –ï—â–µ –∫–æ–≥–æ —Ç–æ —É–¥–∞–ª—è–µ–º ‚ùì', callback_data="listadmins_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
            await remove_admin_from_db(user_id)
            await bot.edit_message_text(
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_name} (ID: {user_id}) —É–¥–∞–ª–µ–Ω.",
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id, reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('üîÅ –ï—â–µ –∫–æ–≥–æ —Ç–æ —É–¥–∞–ª—è–µ–º ‚ùì', callback_data="listadmins_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {user_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)

    # –£–±—Ä–∞—Ç—å –∏–∑ —á—Å
    @dp.callback_query_handler(lambda callback_query: callback_query.data == "blacklist_")
    async def list_admins(callback_query: types.CallbackQuery):
        users_info = await get_user_to_black_list()
        if not users_info:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            for user in users_info:
                user_id = user['user_id']
                user_name = user.get('user_name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
                user_number = user.get('user_number', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞')
                button_text = f"‚ùåüÜî: {user_id}\n–ò–º—è:{user_name}"
                button = InlineKeyboardButton(button_text, callback_data=f"delete_blacklist_{user_id}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á—Å:",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)

    @dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('delete_blacklist_'))
    async def delete_admin(callback_query: types.CallbackQuery):
        user_id = int(callback_query.data.split('_')[2])

        black_list_info = await get_blacklist_info(user_id)
        user_info = await get_user(user_id)

        user_name = '–ù–µ—Ç –∏–º–µ–Ω–∏'
        user_number = '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞'
        keyboard = InlineKeyboardMarkup()

        if black_list_info:
            user_name = black_list_info.get('user_name', user_name)
            user_number = black_list_info.get('user_number', user_number)

        user_name = '–ù–µ—Ç –∏–º–µ–Ω–∏'
        user_number = '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞'

        if user_info:
            user_name = user_info.get('name', user_name)
            user_number = user_info.get('number', user_number)

        if black_list_info:
            keyboard.add(InlineKeyboardButton('üîÅ –ï—â–µ –∫–æ–≥–æ —Ç–æ —É–±—Ä–∞—Ç—å', callback_data="blacklist_"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await remove_user_from_black_list(user_id)
            await bot.edit_message_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}, {user_number}\nID: {user_id} —É–±—Ä–∞–Ω –∏–∑ —á—Å.",
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id, reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('üîÅ –ï—â–µ –∫–æ–≥–æ —Ç–æ —É–±—Ä–∞—Ç—å', callback_data="blacklist_"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
            await bot.edit_message_text(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}, {user_number}\nID: {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "addcategory_")
    async def add_category_handler(callback_query, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='catalogsandproduct'))
        await bot.edit_message_text(
            "üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ üî§",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)
        await NewCategory.enter_name.set()

    @dp.message_handler(lambda message: len(message.text) >= 40, state=NewCategory.enter_name)
    async def add_category_name_invalid(message: types.Message):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='catalogsandproduct'))
        await message.reply(
            f'–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=keyboard)

    @dp.message_handler(state=NewCategory.enter_name)
    async def add_category_name(message: types.Message, state: FSMContext):
        existing_category = await get_categories_from_db()
        get_categories = [name.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏') for name in existing_category]
        category_name = message.text
        clean_category_name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9\s]', ' ', category_name)
        existing_category = await get_catalog_by_name(category_name)
        keyboard = InlineKeyboardMarkup()

        if not clean_category_name:
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await message.reply(
                "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã",
                reply_markup=keyboard)

            return

        if not category_name:
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard)
            return

        if category_name in get_categories:
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await message.reply("–ö–∞—Ç–∞–ª–æ–≥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.",
                                reply_markup=keyboard)
            return

        category_id = await add_category(category_name)
        keyboard.add(InlineKeyboardButton("üîÅ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data='addcategory_'))
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
        await message.reply(f"–ö–∞—Ç–∞–ª–æ–≥ {category_name} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=keyboard)
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data == "deletecategory_")
    async def delete_category_handler(callback_query: types.CallbackQuery):
        categories = await get_categories_from_db()

        if categories:
            keyboard = InlineKeyboardMarkup()
            for category in categories:
                category_name = category.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
                button = InlineKeyboardButton(category_name,
                                              callback_data=f"confirm_delete_category_{category['_id']}")
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct"))
            await bot.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="catalogsandproduct"))
            await bot.edit_message_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("confirm_delete_category_"))
    async def confirm_delete_category(callback_query: types.CallbackQuery):
        category_id = callback_query.data.split("_")[3]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data=f"delete_category_{category_id}"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="catalogsandproduct")
        )
        await bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥?",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data.startswith("delete_category_"))
    async def delete_category(callback_query: types.CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="catalogsandproduct"))
        category_id = callback_query.data.split("_")[2]
        removed = await remove_category_from_db(category_id)
        if removed:
            await bot.edit_message_text(
                f"–ö–∞—Ç–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard
            )
        else:
            await bot.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard
            )

    @dp.callback_query_handler(lambda c: c.data.startswith('addproduct_'), state='*')
    async def add_product(callback_query: types.CallbackQuery):
        keyboards_get_catalog = await get_addproduct_keyboard()
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct")
        keyboards_get_catalog.add(cancel_button)
        await bot.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:',
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboards_get_catalog)
        await ProductForm.add_choice.set()

    @dp.callback_query_handler(lambda c: c.data.startswith('catalog_'), state=ProductForm.add_choice)
    async def catalog_chosen(callback_query: types.CallbackQuery, state: FSMContext):
        catalog_name = callback_query.data.split('_')[1]
        await state.update_data(catalog_name=catalog_name)
        keyboard = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct")
        keyboard.add(cancel_button)
        await ProductForm.add_name.set()
        await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ {catalog_name}")
        await callback_query.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üî§",
            reply_markup=keyboard)

    @dp.message_handler(lambda message: len(message.text) >= 90, state=ProductForm.add_name)
    async def add_product_name_invalid(message: types.Message):
        await message.reply(
            f'–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ 90 —Å–∏–º–≤–æ–ª–æ–≤')

    @dp.message_handler(state=ProductForm.add_name)
    async def add_product_name(message: types.Message, state: FSMContext):
        product_name = message.text
        keyboard = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct")
        keyboard.add(cancel_button)
        await state.update_data(product_name=product_name)
        await ProductForm.add_name_description.set()
        await message.reply('–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ üî§',
                            reply_markup=keyboard)

    @dp.message_handler(state=ProductForm.add_name_description)
    async def add_product_name_discription(message: types.Message, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct")
        keyboard.add(cancel_button)
        name_description = message.text
        await state.update_data(name_description=name_description)
        await ProductForm.add_price.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ üî¢', reply_markup=keyboard)

    @dp.message_handler(lambda message: not message.text.replace(".", "", 1).isdigit(), state=ProductForm.add_price)
    async def add_product_invalid_price(message: types.Message):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ üî¢.')

    @dp.message_handler(lambda message: message.text.replace(".", "", 1).isdigit(), state=ProductForm.add_price)
    async def add_product_price(message: types.Message, state: FSMContext):
        keyboard = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data="catalogsandproduct")
        keyboard.add(cancel_button)
        product_price = float(message.text)
        await state.update_data(product_price=product_price)
        await ProductForm.add_quantity.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ üî¢', reply_markup=keyboard)

    @dp.message_handler(lambda message: not message.text.isdigit(), state=ProductForm.add_quantity)
    async def add_product_invalid_quantity(message: types.Message):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ üî¢.')

    @dp.message_handler(lambda message: message.text.isdigit(), state=ProductForm.add_quantity)
    async def add_product_quantity(message: types.Message, state: FSMContext):
        product_quantity = int(message.text)
        await state.update_data(product_quantity=product_quantity)
        await ProductForm.add_photo.set()
        await message.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ üÜï.')

    @dp.message_handler(content_types=types.ContentType.PHOTO, state=ProductForm.add_photo)
    async def add_product_photo(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        data = await state.get_data()
        product_name = data['product_name']
        name_description = data['name_description']
        product_price = data['product_price']
        product_quantity = data['product_quantity']
        catalog_name = data['catalog_name']
        image_ids = await save_image(message.photo)

        if len(image_ids) > 0:
            product_info = {
                "_id": ObjectId(),
                "product_name": product_name,
                "name_description": name_description,
                "product_price": product_price,
                "quantity": product_quantity,
                "image_ids": image_ids[0] if len(image_ids) == 1 else image_ids
            }
        else:
            product_info = {
                "_id": ObjectId(),
                "product_name": product_name,
                "name_description": name_description,
                "product_price": product_price,
                "quantity": product_quantity,
                "image_ids": []
            }
        keyboard = InlineKeyboardMarkup()
        success = await add_product_to_category(catalog_name, product_info)
        if success:
            keyboard.add(InlineKeyboardButton("üîÅ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="addproduct_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=keyboard)
            await state.finish()
        else:
            keyboard.add(InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="addproduct_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard)

    async def get_categories_delete():
        catalogs = await get_categories_from_db()
        categories_data = []

        for category in catalogs:
            category_name = category.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            categories_data.append(category_name)

        return categories_data

    @dp.callback_query_handler(lambda c: c.data.startswith("deleteproduct_"))
    async def delete_product(callback_query: types.CallbackQuery, state: FSMContext):
        categories = await get_categories_from_db()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="catalogsandproduct"))
        if not categories:
            await bot.edit_message_text(
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–æ–≤.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
            await state.finish()
            return

        keyboard = InlineKeyboardMarkup()
        for category in categories:
            category_name = category['name']
            keyboard.add(InlineKeyboardButton(category_name, callback_data=f"choosecategory_{category['_id']}"))
        keyboard.add(InlineKeyboardButton("üîô –ü–µ—Ä–µ–¥—É–º–∞–ª–∏ ?", callback_data='catalogsandproduct'))
        await state.update_data(action="deleteproduct")
        await DeleteProduct.select_category.set()
        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("choosecategory_"), state=DeleteProduct.select_category)
    async def choose_category(callback_query: types.CallbackQuery, state: FSMContext):
        selected_category = callback_query.data.split('_')[1]
        products = await get_products_in_category(selected_category)
        if not products:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é ?", callback_data="deleteproduct_"))
            keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await bot.edit_message_text(
                "–í —ç—Ç–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
            await state.finish()
            return

        keyboard = InlineKeyboardMarkup()
        for product in products:
            product_name = product['product_name']
            product_id = str(product['_id'])
            keyboard.add(InlineKeyboardButton(product_name,
                                              callback_data=f"confirmdelete_{selected_category}_{product_id}"))
        await state.update_data(selected_category=selected_category)
        await DeleteProduct.select_product.set()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data.startswith("confirmdelete_"), state=DeleteProduct.select_product)
    async def confirm_delete_product(callback_query: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_category = state_data.get('selected_category')
        data_parts = callback_query.data.split("_")
        product_id = data_parts[2]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data=f"deleteproduct1_{selected_category}_{product_id}"),
            InlineKeyboardButton("–ù–µ—Ç", callback_data="catalogsandproduct")
        )
        await bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ ?",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard
        )

    @dp.callback_query_handler(lambda c: c.data.startswith("deleteproduct1_"), state=DeleteProduct.select_product)
    async def delete_product_confirmed(callback_query: types.CallbackQuery, state: FSMContext):
        state_data = await state.get_data()
        selected_category = state_data.get('selected_category')

        data_parts = callback_query.data.split("_")
        category_name = data_parts[1]
        product_id = ObjectId(data_parts[2])
        result = await remove_product_from_db_by_id(category_name, product_id)
        keyboard = InlineKeyboardMarkup()

        if result:
            keyboard.add(InlineKeyboardButton("üîÅ –£–¥–∞–ª–∏—Ç—å –µ—â–µ?", callback_data="deleteproduct_"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await bot.edit_message_text(
                "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
        else:
            keyboard.add(InlineKeyboardButton("üîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞?", callback_data="deleteproduct_"))
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='catalogsandproduct'))
            await bot.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                callback_query.from_user.id, callback_query.message.message_id,
                reply_markup=keyboard)
        await state.finish()

    @dp.callback_query_handler(lambda c: c.data == "stats")
    async def send_daily_stats(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        daily_stats = InlineKeyboardButton("–î–µ–Ω—å", callback_data="daily_stats")
        weekly_stats = InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="weekly_stats")
        monthly_stats = InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="monthly_stats")
        keyboard.add(daily_stats, weekly_stats, monthly_stats)
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data='admins'))
        await bot.edit_message_text(
            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:',
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "daily_stats")
    async def send_daily_stats(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="stats"))
        today = datetime.utcnow()
        stats = await get_daily_stats(today)
        await bot.edit_message_text(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats}",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "weekly_stats")
    async def send_weekly_stats(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="stats"))
        today = datetime.utcnow()
        week_ago = today - timedelta(days=7)
        stats = await get_stats_for_period(week_ago, today)
        await bot.edit_message_text(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:\n{stats}",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "monthly_stats")
    async def send_monthly_stats(callback_query: CallbackQuery):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è–¥", callback_data="stats"))
        today = datetime.utcnow()
        month_ago = today - timedelta(days=30)

        stats = await get_stats_for_period(month_ago, today)
        await bot.edit_message_text(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n{stats}",
            callback_query.from_user.id, callback_query.message.message_id,
            reply_markup=keyboard)
